
328pSerialTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a1  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091e  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f2  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000025f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004af  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000adb  00000000  00000000  00002bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000369a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	54 72       	andi	r21, 0x24	; 36
  6a:	61 6e       	ori	r22, 0xE1	; 225
  6c:	73 6d       	ori	r23, 0xD3	; 211
  6e:	69 74       	andi	r22, 0x49	; 73
  70:	69 6e       	ori	r22, 0xE9	; 233
  72:	64 6f       	ori	r22, 0xF4	; 244
  74:	20 70       	andi	r18, 0x00	; 0
  76:	72 69       	ori	r23, 0x92	; 146
  78:	6d 65       	ori	r22, 0x5D	; 93
  7a:	69 72       	andi	r22, 0x29	; 41
  7c:	61 20       	and	r6, r1
  7e:	6d 65       	ori	r22, 0x5D	; 93
  80:	6e 73       	andi	r22, 0x3E	; 62
  82:	61 67       	ori	r22, 0x71	; 113
  84:	65 6d       	ori	r22, 0xD5	; 213
  86:	20 70       	andi	r18, 0x00	; 0
  88:	61 72       	andi	r22, 0x21	; 33
  8a:	61 20       	and	r6, r1
  8c:	6f 20       	and	r6, r15
  8e:	63 6f       	ori	r22, 0xF3	; 243
  90:	6d 70       	andi	r22, 0x0D	; 13
  92:	75 74       	andi	r23, 0x45	; 69
  94:	61 64       	ori	r22, 0x41	; 65
  96:	6f 72       	andi	r22, 0x2F	; 47
  98:	21 20       	and	r2, r1
  9a:	44 69       	ori	r20, 0x94	; 148
  9c:	67 69       	ori	r22, 0x97	; 151
  9e:	74 65       	ori	r23, 0x54	; 84
  a0:	20 61       	ori	r18, 0x10	; 16
  a2:	67 6f       	ori	r22, 0xF7	; 247
  a4:	72 61       	ori	r23, 0x12	; 18
  a6:	20 2d       	mov	r18, r0
  a8:	20 50       	subi	r18, 0x00	; 0
  aa:	61 72       	andi	r22, 0x21	; 33
  ac:	61 20       	and	r6, r1
  ae:	73 61       	ori	r23, 0x13	; 19
  b0:	69 72       	andi	r22, 0x29	; 41
  b2:	20 3c       	cpi	r18, 0xC0	; 192
  b4:	2a 3e       	cpi	r18, 0xEA	; 234
  b6:	0a 00       	.word	0x000a	; ????
	...

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  ca:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <cmd_LCD>:
//---------------------------------------------------------------------------------------------
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)				//c é o dado  e cd indica se é instrução ou caractere
{
	if(cd==0)
  d2:	61 11       	cpse	r22, r1
  d4:	02 c0       	rjmp	.+4      	; 0xda <cmd_LCD+0x8>
		clr_bit(CONTR_LCD,RS);
  d6:	5a 98       	cbi	0x0b, 2	; 11
  d8:	01 c0       	rjmp	.+2      	; 0xdc <cmd_LCD+0xa>
	else
		set_bit(CONTR_LCD,RS);
  da:	5a 9a       	sbi	0x0b, 2	; 11

	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F)|(0xF0 & c);		
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	28 2f       	mov	r18, r24
  e2:	20 7f       	andi	r18, 0xF0	; 240
  e4:	92 2b       	or	r25, r18
  e6:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	45 e0       	ldi	r20, 0x05	; 5
  ea:	4a 95       	dec	r20
  ec:	f1 f7       	brne	.-4      	; 0xea <cmd_LCD+0x18>
  ee:	00 00       	nop
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	
	#endif
	
	pulso_enable();
  f0:	5b 9a       	sbi	0x0b, 3	; 11
  f2:	95 e0       	ldi	r25, 0x05	; 5
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <cmd_LCD+0x22>
  f8:	00 00       	nop
  fa:	5b 98       	cbi	0x0b, 3	; 11
  fc:	40 ef       	ldi	r20, 0xF0	; 240
  fe:	4a 95       	dec	r20
 100:	f1 f7       	brne	.-4      	; 0xfe <cmd_LCD+0x2c>

	//segundo nibble de dados - 4 LSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c<<4));		
 102:	2b b1       	in	r18, 0x0b	; 11
 104:	92 2f       	mov	r25, r18
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	40 e1       	ldi	r20, 0x10	; 16
 10a:	84 9f       	mul	r24, r20
 10c:	90 01       	movw	r18, r0
 10e:	11 24       	eor	r1, r1
 110:	29 2b       	or	r18, r25
 112:	2b b9       	out	0x0b, r18	; 11
 114:	95 e0       	ldi	r25, 0x05	; 5
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <cmd_LCD+0x44>
 11a:	00 00       	nop
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
	#endif
	
	pulso_enable();
 11c:	5b 9a       	sbi	0x0b, 3	; 11
 11e:	45 e0       	ldi	r20, 0x05	; 5
 120:	4a 95       	dec	r20
 122:	f1 f7       	brne	.-4      	; 0x120 <cmd_LCD+0x4e>
 124:	00 00       	nop
 126:	5b 98       	cbi	0x0b, 3	; 11
 128:	90 ef       	ldi	r25, 0xF0	; 240
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <cmd_LCD+0x58>
	
	if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza espera LCD estar pronto
 12e:	61 11       	cpse	r22, r1
 130:	08 c0       	rjmp	.+16     	; 0x142 <cmd_LCD+0x70>
 132:	84 30       	cpi	r24, 0x04	; 4
 134:	30 f4       	brcc	.+12     	; 0x142 <cmd_LCD+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9f e1       	ldi	r25, 0x1F	; 31
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <cmd_LCD+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <cmd_LCD+0x6e>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void inic_LCD_4bits()		//sequência ditada pelo fabricando do circuito integrado HD44780
{							//o LCD será só escrito. Então, R/W é sempre zero.

	clr_bit(CONTR_LCD,RS);	//RS em zero indicando que o dado para o LCD será uma instrução	
 144:	5a 98       	cbi	0x0b, 2	; 11
	clr_bit(CONTR_LCD,E);	//pino de habilitação em zero
 146:	5b 98       	cbi	0x0b, 3	; 11
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 ef       	ldi	r24, 0xF9	; 249
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <inic_LCD_4bits+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <inic_LCD_4bits+0x14>
 158:	00 00       	nop
	
	_delay_ms(20);	 		//tempo para estabilizar a tensão do LCD, após VCC ultrapassar 4.5 V (na prática pode
							//ser maior). 
	//interface de 8 bits						
	#if (nibble_dados)
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;		
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	80 63       	ori	r24, 0x30	; 48
 160:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	25 e0       	ldi	r18, 0x05	; 5
 164:	2a 95       	dec	r18
 166:	f1 f7       	brne	.-4      	; 0x164 <inic_LCD_4bits+0x20>
 168:	00 00       	nop
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;		
	#endif						
							
	pulso_enable();			//habilitação respeitando os tempos de resposta do LCD
 16a:	5b 9a       	sbi	0x0b, 3	; 11
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <inic_LCD_4bits+0x2a>
 172:	00 00       	nop
 174:	5b 98       	cbi	0x0b, 3	; 11
 176:	90 ef       	ldi	r25, 0xF0	; 240
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <inic_LCD_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <inic_LCD_4bits+0x3c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <inic_LCD_4bits+0x42>
 186:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <inic_LCD_4bits+0x46>
 18e:	00 00       	nop
	_delay_ms(5);		
	pulso_enable();
 190:	5b 9a       	sbi	0x0b, 3	; 11
 192:	25 e0       	ldi	r18, 0x05	; 5
 194:	2a 95       	dec	r18
 196:	f1 f7       	brne	.-4      	; 0x194 <inic_LCD_4bits+0x50>
 198:	00 00       	nop
 19a:	5b 98       	cbi	0x0b, 3	; 11
 19c:	80 ef       	ldi	r24, 0xF0	; 240
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <inic_LCD_4bits+0x5a>
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <inic_LCD_4bits+0x62>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <inic_LCD_4bits+0x68>
 1ac:	00 00       	nop
 1ae:	95 e0       	ldi	r25, 0x05	; 5
 1b0:	9a 95       	dec	r25
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <inic_LCD_4bits+0x6c>
 1b4:	00 00       	nop
	_delay_us(200);
	pulso_enable();	/*até aqui ainda é uma interface de 8 bits.
 1b6:	5b 9a       	sbi	0x0b, 3	; 11
 1b8:	25 e0       	ldi	r18, 0x05	; 5
 1ba:	2a 95       	dec	r18
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <inic_LCD_4bits+0x76>
 1be:	00 00       	nop
 1c0:	5b 98       	cbi	0x0b, 3	; 11
 1c2:	80 ef       	ldi	r24, 0xF0	; 240
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <inic_LCD_4bits+0x80>
					estabilização da tensão (geralmente funciona). Se o LCD não for inicializado primeiro no 
					modo de 8 bits, haverá problemas se o microcontrolador for inicializado e o display já o tiver sido.*/
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados) 
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;		
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	95 e0       	ldi	r25, 0x05	; 5
 1d2:	9a 95       	dec	r25
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <inic_LCD_4bits+0x8e>
 1d6:	00 00       	nop
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
	#endif
	
	pulso_enable();		
 1d8:	5b 9a       	sbi	0x0b, 3	; 11
 1da:	25 e0       	ldi	r18, 0x05	; 5
 1dc:	2a 95       	dec	r18
 1de:	f1 f7       	brne	.-4      	; 0x1dc <inic_LCD_4bits+0x98>
 1e0:	00 00       	nop
 1e2:	5b 98       	cbi	0x0b, 3	; 11
 1e4:	80 ef       	ldi	r24, 0xF0	; 240
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <inic_LCD_4bits+0xa2>
   	cmd_LCD(0x28,0); 		//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
							//são enviados os 2 nibbles (0x2 e 0x8)
   	cmd_LCD(0x08,0);		//desliga o display
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
   	cmd_LCD(0x01,0);		//limpa todo o display
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
   	cmd_LCD(0x0C,0);		//mensagem aparente cursor inativo não piscando   
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
   	cmd_LCD(0x80,0);		//inicializa cursor na primeira posição a esquerda - 1a linha
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
 212:	08 95       	ret

00000214 <main>:
int main()
{
	unsigned char status;
	unsigned char dado_srt[3];
	int x = 0;
	DDRD = 0xFF;
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	8a b9       	out	0x0a, r24	; 10
	USART_Inic(MYUBRR);
 218:	87 e6       	ldi	r24, 0x67	; 103
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 3c 01 	call	0x278	; 0x278 <USART_Inic>
	inic_LCD_4bits();
 220:	0e 94 a2 00 	call	0x144	; 0x144 <inic_LCD_4bits>
	escreve_USART_Flash(primeira_msg);
 224:	88 e6       	ldi	r24, 0x68	; 104
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 59 01 	call	0x2b2	; 0x2b2 <escreve_USART_Flash>

	while(1)
	{
		status = USART_Recebe();
 22c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Recebe>
		if (status == 'L')
 230:	8c 34       	cpi	r24, 0x4C	; 76
 232:	41 f4       	brne	.+16     	; 0x244 <main+0x30>
		{
			dado_srt[0]= 'L';
			dado_srt[1]= USART_Recebe();
 234:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Recebe>
 238:	d8 2f       	mov	r29, r24
			dado_srt[2]= USART_Recebe();
 23a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Recebe>
 23e:	c8 2f       	mov	r28, r24
	while(1)
	{
		status = USART_Recebe();
		if (status == 'L')
		{
			dado_srt[0]= 'L';
 240:	1c e4       	ldi	r17, 0x4C	; 76
 242:	09 c0       	rjmp	.+18     	; 0x256 <main+0x42>
			dado_srt[1]= USART_Recebe();
			dado_srt[2]= USART_Recebe();
		}
		if (status == 'D')
 244:	84 34       	cpi	r24, 0x44	; 68
 246:	39 f4       	brne	.+14     	; 0x256 <main+0x42>
		{
			dado_srt[0]= 'D';
			dado_srt[1]= USART_Recebe();
 248:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Recebe>
 24c:	d8 2f       	mov	r29, r24
			dado_srt[2]= USART_Recebe();
 24e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Recebe>
 252:	c8 2f       	mov	r28, r24
			dado_srt[1]= USART_Recebe();
			dado_srt[2]= USART_Recebe();
		}
		if (status == 'D')
		{
			dado_srt[0]= 'D';
 254:	14 e4       	ldi	r17, 0x44	; 68
			dado_srt[1]= USART_Recebe();
			dado_srt[2]= USART_Recebe();
		}
		
		cmd_LCD(0x80, 0);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
		cmd_LCD(dado_srt[0], 1);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 2f       	mov	r24, r17
 262:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
		cmd_LCD(dado_srt[1], 1);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	8d 2f       	mov	r24, r29
 26a:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
		cmd_LCD(dado_srt[2], 1);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	8c 2f       	mov	r24, r28
 272:	0e 94 69 00 	call	0xd2	; 0xd2 <cmd_LCD>
		
	}
 276:	da cf       	rjmp	.-76     	; 0x22c <main+0x18>

00000278 <USART_Inic>:
}
//---------------------------------------------------------------------------
void escreve_USART(char *c)		//escreve String (RAM)
{
   for (; *c!=0;c++) USART_Transmite(*c);
}
 278:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 27c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 280:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 284:	88 e1       	ldi	r24, 0x18	; 24
 286:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 290:	08 95       	ret

00000292 <USART_Transmite>:
 292:	e0 ec       	ldi	r30, 0xC0	; 192
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	90 81       	ld	r25, Z
 298:	95 ff       	sbrs	r25, 5
 29a:	fd cf       	rjmp	.-6      	; 0x296 <USART_Transmite+0x4>
 29c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2a0:	08 95       	ret

000002a2 <USART_Recebe>:
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <USART_Recebe+0x4>
 2ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b0:	08 95       	ret

000002b2 <escreve_USART_Flash>:
//---------------------------------------------------------------------------
void escreve_USART_Flash(const char *c)	//escreve String (Flash)
{
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) USART_Transmite(pgm_read_byte(&(*c)));
 2b8:	fc 01       	movw	r30, r24
 2ba:	84 91       	lpm	r24, Z
 2bc:	88 23       	and	r24, r24
 2be:	49 f0       	breq	.+18     	; 0x2d2 <escreve_USART_Flash+0x20>
 2c0:	fe 01       	movw	r30, r28
 2c2:	84 91       	lpm	r24, Z
 2c4:	0e 94 49 01 	call	0x292	; 0x292 <USART_Transmite>
 2c8:	21 96       	adiw	r28, 0x01	; 1
 2ca:	fe 01       	movw	r30, r28
 2cc:	84 91       	lpm	r24, Z
 2ce:	81 11       	cpse	r24, r1
 2d0:	f7 cf       	rjmp	.-18     	; 0x2c0 <escreve_USART_Flash+0xe>
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
