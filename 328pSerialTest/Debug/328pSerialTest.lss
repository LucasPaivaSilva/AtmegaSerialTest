
328pSerialTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095c  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000755  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ba  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	0a 54       	subi	r16, 0x4A	; 74
  6a:	72 61       	ori	r23, 0x12	; 18
  6c:	6e 73       	andi	r22, 0x3E	; 62
  6e:	6d 69       	ori	r22, 0x9D	; 157
  70:	73 73       	andi	r23, 0x33	; 51
  72:	61 6f       	ori	r22, 0xF1	; 241
  74:	20 45       	sbci	r18, 0x50	; 80
  76:	6e 63       	ori	r22, 0x3E	; 62
  78:	65 72       	andi	r22, 0x25	; 37
  7a:	72 61       	ori	r23, 0x12	; 18
  7c:	64 61       	ori	r22, 0x14	; 20
  7e:	3a 20       	and	r3, r10
  80:	42 79       	andi	r20, 0x92	; 146
  82:	65 2c       	mov	r6, r5
  84:	20 42       	sbci	r18, 0x20	; 32
  86:	79 65       	ori	r23, 0x59	; 89
  88:	21 00       	.word	0x0021	; ????
	...

0000008b <primeira_msg>:
  8b:	54 72 61 6e 73 6d 69 74 69 6e 64 6f 20 70 72 69     Transmitindo pri
  9b:	6d 65 69 72 61 20 6d 65 6e 73 61 67 65 6d 20 70     meira mensagem p
  ab:	61 72 61 20 6f 20 63 6f 6d 70 75 74 61 64 6f 72     ara o computador
  bb:	21 20 44 69 67 69 74 65 20 61 67 6f 72 61 20 2d     ! Digite agora -
  cb:	20 50 61 72 61 20 73 61 69 72 20 3c 2a 3e 0a 00      Para sair <*>..
	...

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d8 e0       	ldi	r29, 0x08	; 8
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61
  e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  ec:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <main>:
//-------------------------------------------------------------------------
int main()
{
	unsigned char dado_recebido;
	
	USART_Inic(MYUBRR);
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 95 00 	call	0x12a	; 0x12a <USART_Inic>
	
	escreve_USART_Flash(primeira_msg);
  fc:	8b e8       	ldi	r24, 0x8B	; 139
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 b2 00 	call	0x164	; 0x164 <escreve_USART_Flash>
	
	do
	{
		dado_recebido= USART_Recebe();	//recebe caractere
 104:	0e 94 aa 00 	call	0x154	; 0x154 <USART_Recebe>
 108:	c8 2f       	mov	r28, r24
		USART_Transmite('-');
 10a:	8d e2       	ldi	r24, 0x2D	; 45
 10c:	0e 94 a2 00 	call	0x144	; 0x144 <USART_Transmite>
		USART_Transmite('>');
 110:	8e e3       	ldi	r24, 0x3E	; 62
 112:	0e 94 a2 00 	call	0x144	; 0x144 <USART_Transmite>
		USART_Transmite(dado_recebido);	//envia o caractere recebido
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 a2 00 	call	0x144	; 0x144 <USART_Transmite>
	}while(dado_recebido!='*');
 11c:	ca 32       	cpi	r28, 0x2A	; 42
 11e:	91 f7       	brne	.-28     	; 0x104 <main+0x10>
	
	escreve_USART_Flash(segunda_msg);
 120:	88 e6       	ldi	r24, 0x68	; 104
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 b2 00 	call	0x164	; 0x164 <escreve_USART_Flash>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x34>

0000012a <USART_Inic>:
}
//---------------------------------------------------------------------------
void escreve_USART(char *c)		//escreve String (RAM)
{
   for (; *c!=0;c++) USART_Transmite(*c);
}
 12a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 132:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 142:	08 95       	ret

00000144 <USART_Transmite>:
 144:	e0 ec       	ldi	r30, 0xC0	; 192
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	90 81       	ld	r25, Z
 14a:	95 ff       	sbrs	r25, 5
 14c:	fd cf       	rjmp	.-6      	; 0x148 <USART_Transmite+0x4>
 14e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 152:	08 95       	ret

00000154 <USART_Recebe>:
 154:	e0 ec       	ldi	r30, 0xC0	; 192
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	ec f7       	brge	.-6      	; 0x158 <USART_Recebe+0x4>
 15e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 162:	08 95       	ret

00000164 <escreve_USART_Flash>:
//---------------------------------------------------------------------------
void escreve_USART_Flash(const char *c)	//escreve String (Flash)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
   for (;pgm_read_byte(&(*c))!=0;c++) USART_Transmite(pgm_read_byte(&(*c)));
 16a:	fc 01       	movw	r30, r24
 16c:	84 91       	lpm	r24, Z
 16e:	88 23       	and	r24, r24
 170:	49 f0       	breq	.+18     	; 0x184 <escreve_USART_Flash+0x20>
 172:	fe 01       	movw	r30, r28
 174:	84 91       	lpm	r24, Z
 176:	0e 94 a2 00 	call	0x144	; 0x144 <USART_Transmite>
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	fe 01       	movw	r30, r28
 17e:	84 91       	lpm	r24, Z
 180:	81 11       	cpse	r24, r1
 182:	f7 cf       	rjmp	.-18     	; 0x172 <escreve_USART_Flash+0xe>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
